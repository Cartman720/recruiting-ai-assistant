generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Industry {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String
  parentId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parent      Industry?   @relation("IndustryHierarchy", fields: [parentId], references: [id])
  children    Industry[]  @relation("IndustryHierarchy")
  candidates  Candidate[] @relation("CandidateToIndustry")
}

model Candidate {
  id                  String          @id @default(cuid())
  name                String
  email               String?
  summary             String
  yearsOfExperience   Int?
  educationLevel      String?
  expertiseLevel      ExpertiseLevel?
  city                String?
  state               String?
  country             String?
  location            String?
  skills              String[]
  certifications      String[]
  languages           String[]
  willingToRelocate   Boolean?
  hasRemoteExperience Boolean?
  rawResume           String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  title               String?
  education           Education[]
  experiences         Experience[]
  industries          Industry[]      @relation("CandidateToIndustry")
}

model Experience {
  id          String    @id @default(cuid())
  company     String
  title       String
  startDate   DateTime?
  endDate     DateTime?
  description String
  candidateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Education {
  id          String    @id @default(cuid())
  school      String
  degree      String
  startDate   DateTime?
  endDate     DateTime?
  candidateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Thread {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     Json?
  summary   String?
  title     String?
}

model checkpoint_blobs {
  thread_id     String
  checkpoint_ns String @default("")
  channel       String
  version       String
  type          String
  blob          Bytes?

  @@id([thread_id, checkpoint_ns, channel, version])
}

model checkpoint_migrations {
  v Int @id
}

model checkpoint_writes {
  thread_id     String
  checkpoint_ns String  @default("")
  checkpoint_id String
  task_id       String
  idx           Int
  channel       String
  type          String?
  blob          Bytes

  @@id([thread_id, checkpoint_ns, checkpoint_id, task_id, idx])
}

model checkpoints {
  thread_id            String
  checkpoint_ns        String  @default("")
  checkpoint_id        String
  parent_checkpoint_id String?
  type                 String?
  checkpoint           Json
  metadata             Json    @default("{}")

  @@id([thread_id, checkpoint_ns, checkpoint_id])
}

model UserOAuthIntegration {
  id           String   @id @default(cuid())
  userId       String
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ExpertiseLevel {
  intern
  junior
  mid
  senior
  lead
  principal
}
